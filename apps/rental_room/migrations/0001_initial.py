# Generated by Django 5.1.5 on 2025-03-13 17:41

import apps.rental_room.models
import backend_project.utils
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RentalRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('additional_address', models.TextField(max_length=512)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('closing_time', models.TimeField(blank=True, null=True)),
                ('total_number', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('average_rating', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('further_description', models.TextField(blank=True, max_length=1024, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rental_rooms', to='address.commune')),
                ('lessor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='possessed_rooms', to=settings.AUTH_USER_MODEL)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RentalRoomImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to=apps.rental_room.models.rental_room_image_upload_to)),
                ('rental_room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='images', to='rental_room.rentalroom')),
            ],
        ),
        migrations.CreateModel(
            name='RoomCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=10)),
                ('remaining_occupancy', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_occupancy', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_sharable', models.BooleanField(default=False)),
                ('rental_room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='room_codes', to='rental_room.rentalroom')),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyChargesDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_kWh_reading', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('new_kWh_reading', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('old_m3_reading', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('new_m3_reading', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('prev_remaining_charges', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('due_charges', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('paid_charges', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_settled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('room_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='monthly_charges_details', to='rental_room.roomcode')),
            ],
        ),
        migrations.CreateModel(
            name='MonitoringRental',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateField(default=backend_project.utils.today, validators=[django.core.validators.MinValueValidator(backend_project.utils.today)])),
                ('end_date', models.DateField(blank=True, null=True)),
                ('renter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rented_room', to=settings.AUTH_USER_MODEL)),
                ('room_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='monitoring_rentals', to='rental_room.roomcode')),
            ],
        ),
        migrations.CreateModel(
            name='ChargesList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('room_charge', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('deposit', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('electricity_charge', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('water_charge', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('wifi_charge', models.IntegerField(default=-1, validators=[django.core.validators.MinValueValidator(-1)])),
                ('rubbish_charge', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('start_date', models.DateField(default=backend_project.utils.today, validators=[django.core.validators.MinValueValidator(backend_project.utils.today)])),
                ('end_date', models.DateField(blank=True, null=True)),
                ('rental_room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='charges_lists', to='rental_room.rentalroom')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('deposit__lte', models.F('room_charge'))), name='__CHARGES_LIST__deposit__lte__room_charge'), models.CheckConstraint(condition=models.Q(('end_date__isnull', True), ('end_date__gte', models.F('start_date')), _connector='OR'), name='__CHARGES_LIST__end_date__gte__start_date_or_null')],
            },
        ),
        migrations.AddConstraint(
            model_name='roomcode',
            constraint=models.CheckConstraint(condition=models.Q(('remaining_occupancy__lte', models.F('max_occupancy'))), name='__ROOM_CODE__remaining_occupancy__lte__max_occupancy'),
        ),
        migrations.AddConstraint(
            model_name='monthlychargesdetails',
            constraint=models.CheckConstraint(condition=models.Q(('new_kWh_reading__lte', models.F('old_kWh_reading'))), name='__MONTHLY_CHARGES_DETAILS__new_kWh_reading__lte__old_kWh_reading'),
        ),
        migrations.AddConstraint(
            model_name='monthlychargesdetails',
            constraint=models.CheckConstraint(condition=models.Q(('new_m3_reading__lte', models.F('old_m3_reading'))), name='__MONTHLY_CHARGES_DETAILS__new_m3_reading__lte__old_m3_reading'),
        ),
        migrations.AddConstraint(
            model_name='monitoringrental',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__isnull', True), ('end_date__gte', models.F('start_date')), _connector='OR'), name='__MONITORING_RENTAL__end_date__gte__start_date_or_null'),
        ),
    ]
